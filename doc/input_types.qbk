[/==============================================================================
    Use, modification and distribution is subject to the Boost Software License,
    Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
    http://www.boost.org/LICENSE_1_0.txt)
===============================================================================/]

[#input_types]
[section Input types]

[section Simple input types]

The "conventional" input types that are ( or will be ) supported are:

* an integer ( `int`, `long`, `long long`, `unsigned int`, `unsigned long` or `unsigned long long`)
* a string ( a raw string, a `std::basic_string`, `std::basic_string_view`)
* a single character ( with the same type as the output character type, otherwise compilation fails )
* a `bool` ['( to do )]
* a `void*` ['( to do )] 
* a floating point ['( to do )]

For each of them there is a correspoding input type that contains format information in addition to the value to be printed. The __fmt__ function template is used to instanciate them.
For example, `fmt(15)` creates an object that contains an integer value ( is this case `15` ) as well as the default format specification for integers. To change the formatting you call member functions as in the [@https://en.wikibooks.org/wiki/More_C%2B%2B_Idioms/Named_Parameter
named parameter idiom], like this: `fmt(15).hex().showbase()`. 

[#format_functions]
[table
[[member function] [effect] [input types]]

[
[`operator>(int width)`]
[right adjustment]
[all ( integer, floating point, character, string, `void*`, `bool`) ]
]

[[`operator<(int width)`] [left adjustment] [all]]
[[`operator^(int width)`] [centered adjustment] [all]]
[
[`operator%(int width)`]
[internal adjustment (as in [@http://en.cppreference.com/w/cpp/io/manip/left `std::internal`])]
[integer and floating point]
]
[[`fill(char32_t ch)`][sets the fill character to [~ch]] [all]]
[[`p(int precision)`][sets the precision] [integer and floating point]]
[[`dec()`] [decimal base] [integer and floating point]]
[[`hex()`] [hexadecimal base] [integer and floating point]]
[[`oct()`] [octal base] [integer]]

[
[`showpos(bool b)`]
[if [~b] is `true`, print the positive sign for non-negative numbers (as in [@http://en.cppreference.com/w/cpp/io/manip/showpos `std::showpos`])]
[integer and floating point]
]

[
[`showbase(bool b)`]
[if [~b] is `true`, print the numeric base indication (as in [@http://en.cppreference.com/w/cpp/io/manip/showbase `std::showbase`])]
[integer and floating point]
]
[[`operator+()`][same as `showpos(true)`][integer and floating point]]
[[`operator~()`][same as `showbase(true)`][integer]]
[[`multi(int count)`][print the character [~count] times][character]]

]

Since typing `fmt(x).hex()` is a little bit verbouse, the library provides the following functions:

[table
[[expression] [equivalent to]]
[[`hex(x)`][`fmt(x).hex()`]]
[[`dec(x)`][`fmt(x).dec()`]]
[[`oct(x)`][`fmt(x).oct()`]]
[[][]]
[[`right(x, width)`][`fmt(x) > width`]]
[[`left(x, width)`][`fmt(x) < width`]]
[[`center(x, width)`][`fmt(x) ^ width`]]
[[`internal(x, width)`][`fmt(x) % width`]]
[[][]]
[[`right(x, width, fill)`]   [`fmt(x).fill(fill) > width`]]
[[`left(x, width, fill)`]    [`fmt(x).fill(fill) < width`]]
[[`center(x, width, fill)`]  [`fmt(x).fill(fill) ^ width`]]
[[`internal(x, width, fill)`][`fmt(x).fill(fill) % width`]]
[[][]]
[[`multi(x, count)`] [`fmt(x).multi(count)`]]
]

[endsect]

[/
Actually, there is nothing really special about this category. The only difference from the "conventional" input types, is here the /secondary argument/ is different.
]

[#joins]
[section Joins]

[import ../example/joins.cpp]

Joins aligns a sub-list of arguments as if they where one argument.

Syntax:

* `join(`[~arguments]`...)`
* [~join_expression]` (`[~arguments]`...)`

where, the [~join_expression] is one of the following:

* `join_left(`[~width]`)`
* `join_left(`[~width]`, `[~fill_character]`)`
* `join_right(`[~width]`)`
* `join_right(`[~width]`, `[~fill_character]`)`
* `join_center(`[~width]`)`
* `join_center(`[~width]`, `[~fill_character]`)`
* `join_split(`[~width]`, `[~num_args_before_fill]`)`
* `join_split(`[~width]`, `[~fill_character]`, `[~num_args_before_fill]`)`

where:

* [~width] is `int`
* [~num_args_before_fill] is `int`
* [~fill_character] is `char32_t`

[h4 Example]

[joins_example]

You may want to use joins without the purpose of alignment, but solely to treat a whole sub-list of arguments as one.
This is something you way need to do in case you are using an [link overview_tr_string tr-string], especially if you can not edit it.

[join_with_tr_string_part1]
[join_with_tr_string_part2]
[join_with_tr_string_part3]

[endsect]

[section Facets]
[import ../example/facets_pack_as_input.cpp]

You can apply some facet objects to only a subset of the arguments using the following syntax :

* `facets(`[~facets_obj]`...) (`[~arguments]`...)`

[facets_pack_input]

Notice that an argument in the sub list can be of any type that is possible in the outer list.
It could be, for instance, another facets_pack:

[facets_pack_input_2]

When using an tr-string, be aware that the sub-list of argument is treated as it where just one argument:

[facets_pack_input_in_tr_string]

[endsect]

[#ranges]
[section Range]
[import ../example/range_input.cpp]

Syntax:

* `range(`[~range_expression]`)`
* `range(`[~range_expression]`, `[~separator]`)`
* `fmt_range(`[~range_expression]`)`
* `fmt_range(`[~range_expression]`, `[~separator]`)`

* `range(`[~first]`, `[~last]`)`
* `range(`[~first]`, `[~last]`, `[~separator]`)`
* `fmt_range(`[~first]`, `[~last]`)`
* `fmt_range(`[~first]`, `[~last]`, `[~separator]`)`

, where:

* [~range_expression] is a range that provides the multi-pass guarantee.
* [~first], [~last] are [@https://en.cppreference.com/w/cpp/named_req/ForwardIterator ForwardIterators].
* [~separator] is a raw string ( of `char`, `wchar_t`, `char16_t` or `char32_t`)

Example:

[range_sample]

You can use the format functions to format the range's elements

[range_sample_2]

The expression `fmt_range(`[~args]`...)` is equivalent to `fmt(range(`[~args]...`)`

[range_sample_3]

[endsect]


[endsect]


