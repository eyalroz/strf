[/==============================================================================
    Use, modification and distribution is subject to the Boost Software License,
    Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
    http://www.boost.org/LICENSE_1_0.txt)
===============================================================================/]

[section:output_types Output types]

[table
[ []  [Destination type] [Expression]]

[ [1]
  [`std::basic_string <`[~CharT]`, `[~Traits]`, `[~Allocator]`>`]
  [ [*`append_to (`][~destination][*`) `] [*\u00b7\u00b7\u00b7]]]

[ [2] [`std::basic_string <`[~CharT]`, `[~Traits]`, `[~Allocator]`>`]
  [ [*`assign_to (`][~destination][*`) `] [*\u00b7\u00b7\u00b7]]]

[ [3] [`std::string`]
  [ [*`make_string `] [*\u00b7\u00b7\u00b7]]]

[ [4] [`std::u16string`]
  [ [*`make_u16string `] [*\u00b7\u00b7\u00b7]]]

[ [5] [`std::u32string`]
  [ [*`make_u32string `] [*\u00b7\u00b7\u00b7]]]

[ [6] [`std::wstring`]
  [ [*`make_wstring `] [*\u00b7\u00b7\u00b7]]]

[ [7] [`std::basic_string<`[~CharT]`, `[~Traits]`, `[~Allocator]`>`]
  [ [*`make_basic_string <`][~CharT]`, `[~Traits]`, `[~Allocator][*`> (`][~destination][*`) `] [*\u00b7\u00b7\u00b7]]]

[ [8]  [[~CharT]`*`]
  [ [*`write_to <`][~Traits][*`> (`][~destination]`, `[~limit]`, `[~countptr][*`) `] [*\u00b7\u00b7\u00b7]]]

[ [9] [[~CharT]`*`]
  [ [*`write_to <`][~Traits][*`> (`][~destination]`, `[~end]`, `[~countptr][*`) `] [*\u00b7\u00b7\u00b7]]]

[ [10] [[~CharT[size]]]
  [ [*`write_to <`][~Traits][*`> (`][~destination]`, `[~countptr][*`) `] [*\u00b7\u00b7\u00b7]]]

[ [11] [ `std::basic_streambuf <`[~CharT]`, `[~Traits]`>`]
  [ [*`write_to (`][~destination]`, `[~countptr][*`) `] [*\u00b7\u00b7\u00b7]]]

[ [12] [ `FILE*` ( using narrow functions) ]
  [ [*`write_to <`][~CharT][*`> (`][~destination]`,` [~countptr] [*`) `] [*\u00b7\u00b7\u00b7]]]

[ [13]  [ `FILE*` ( using wide functions) ]
  [ [*`wwrite_to (`][~destination]`, `[~countptr][*`) `] [*\u00b7\u00b7\u00b7]]]
]

where:

* [~limit] is `std::size_t`. It determinates the maximum number of characters that can be written, including the termination character.
* [~countptr] is `std::size_t*` and is optional. The number of succefully written characters will be assigned to [~*countptr].
* [~end] is [~CharT]*
* [~CharT] can be `char`, `char16_t`, `char32_t` or `wchar_t`
* " [*\u00b7\u00b7\u00b7] " is the remaining part of the expression. It is anything that comes after the /leading expression/ are ilustraded [link syntax_diagram here].

[h3 Effect]

* 1) Append to string.
* 2) Assign to string.
* 3-7) Generate string.
* 8) Write raw string. Write at most [~limit] characters, including the terminating null character, which is aways written, except if [~limit]` == 0`.
* 9) Same as `write_to(`[~destination]`, `[~end]` - `[~destination]`, `[~countptr]`)`.
* 10) Same as `write_to(`[~destination]`, `[~size]`, `[~countptr]`)`.
* 11) Write content to `std::basic_streambuf`.
* 12) Write content to `FILE*` using narrow orientated functions.
* 13) Write content to `FILE*` using wide orientated functions.

[#ReturnTypes]
[h3 Return type when using the form [~expression...]` = { `[~ args ...]`}`]

* 1 - 2) `std::error_code`
* 3 - 7) `expected<std::basic_string<`[~CharT]`, `[~Traits]`>>`, where the ` expected ` class template is a bare implementation of the proposed __STD_EXPECTED__.
* 8 - 13) `std::error_code`

[#ReturnTypes_throw]
[h3 Return type when using the form [~expression...]` &= { `[~ args ...]`}`]
* 1 - 2) `void`
* 3 - 7) `std::basic_string<`[~CharT]`, `[~Traits]`>`
* 8 - 13) `void`

[*Note:] In all cases ( from 1 to 13 ), if the generated `std::error_code` ( that would be returned if the form [~expression...]` = { `[~ args ...]`}` were used ) is not empty, than a `std::system_error` is thrown.

[/
This does not mean that others types of exception may not be thrown. For example, the use of `make_string` may throw and 
]

[h3 On error]
* 1) Nothing is appended.
* 2) [~destination] becames empty.
* 8 - 10) [~destination]`[0]` is set to `'\0'`, unless [~limit] is `0`. 

[h3 Notes]

* 1-7) An adequate capacity is reserved before writting any character so that at most only one memory allocation happens inside the destination string.
* 7) [~Allocator] is optional. If omitted, it is `std::allocator<`[~CharT]`>`
* 7-10) [~Traits] is optional. If omitted, it is `std::char_traits<`[~CharT]`>`
* 12) [~CharT] is optional. If omitted, it is `char`
* 12-13) `std::fflush` is [_not] called
* 3-7) The [link syntax_diagram leading expression] is not assignable. Hence the expression `make_string = {args ...}` does not compile. So you need to use any of the alternative forms.

[caution In (12) the output should be in binary mode, unless [~CharT] is `char`.]

[endsect]