#  Distributed under the Boost Software License, Version 1.0.
#  (See accompanying file LICENSE_1_0.txt or copy at
#  http://www.boost.org/LICENSE_1_0.txt)

project libs/stringify/test
    : requirements
      <include>../include
      <toolset>clang:<cxxflags>"-std=c++1y -Wall -Wextra"
      <toolset>darwin:<cxxflags>"-std=c++1y -Wall -Wextra"

    ;

slib = /boost/stringify//boost_stringify ;

test-suite stringify :

   # as header-only library:

   [ run tr_string.cpp         : : : : test-tr_string-ho ]
   [ run dispatcher_with_move_only_arg.cpp : : : : test-dispatcher_with_move_only_arg-ho ]
   [ run encode_char.cpp       : : : : test-encode_char-ho ]
   [ run encode_fill.cpp       : : : : test-encode_fill-ho ]
   [ run input_string.cpp      : : : : test-input_string-ho ]
   [ run input_int.cpp         : : : : test-input_int-ho ]
   [ run input_float.cpp         : : : : test-input_float-ho ]
   [ run input_char.cpp        : : : : test-input_char-ho ]
#   [ run input_char32.cpp      : : : : test-input_char32-ho ]
   [ run input_facets_pack.cpp : : : : test-input_facets_pack-ho ]
   [ run input_range.cpp       : : : : test-input_range-ho ]
   [ run numpunct.cpp          : : : : test-numpunct-ho ]
   [ run join.cpp              : : : : test-join-ho ]
   [ run facets_pack_merge.cpp : : : : test-facets_pack_merge-ho ]
   [ run facets_pack.cpp       : : : : test-facets_pack-ho ]
   [ run reserve.cpp           : : : : test-reserve-ho ]
   [ run width_calculator.cpp  : : : : test-width_calculator-ho ]
   [ run utf_to_utf.cpp  : : : : test-utf_to_utf-ho ]
   [ run single_byte_encodings.cpp  : : : : test-single_byte_encodings-ho ]
   [ run cstr_writer.cpp       : : : : test-cstr_writer.cpp-ho ]
   [ run cfile_writer.cpp      : : : : test-cfile_writer.cpp-ho ]
   [ run streambuf_writer.cpp  : : : : test-streambuf_writer.cpp-ho ]
   [ run string_writer.cpp     : : : : test-string_writer.cpp-ho ]

# as static library:

   [ run tr_string.cpp         $(slib) : : : : test-tr_string-nho ]
   [ run dispatcher_with_move_only_arg.cpp $(slib) : : : :
                                        test-dispatcher_with_move_only_arg-nho ]
   [ run encode_char.cpp       $(slib) : : : : test-encode_char-nho ]
   [ run encode_fill.cpp       $(slib) : : : : test-encode_fill-nho ]
   [ run input_string.cpp      $(slib) : : : : test-input_string-nho ]
   [ run input_int.cpp         $(slib) : : : : test-input_int-nho ]
   [ run input_float.cpp         $(slib) : : : : test-input_float-nho ]
   [ run input_char.cpp        $(slib) : : : : test-input_char-nho ]
#   [ run input_char32.cpp      $(slib) : : : : test-input_char32-nho ]
   [ run input_facets_pack.cpp $(slib) : : : : test-input_facets_pack-nho ]
   [ run input_range.cpp       $(slib) : : : : test-input_range-nho ]
   [ run numpunct.cpp          $(slib) : : : : test-numpunct-nho ]
   [ run join.cpp              $(slib) : : : : test-join-nho ]
   [ run facets_pack_merge.cpp $(slib) : : : : test-facets_pack_merge-nho ]
   [ run facets_pack.cpp       $(slib) : : : : test-facets_pack-nho ]
   [ run reserve.cpp           $(slib) : : : : test-reserve-nho ]
   [ run width_calculator.cpp  $(slib) : : : : test-width_calculator-nho ]
   [ run utf_to_utf.cpp        $(slib) : : : : test-utf_to_utf-nho ]
   [ run single_byte_encodings.cpp  $(slib) : : : : test-single_byte_encodings-nho ]
   [ run cstr_writer.cpp       $(slib) : : : : test-cstr_writer.cpp-nho ]
   [ run cfile_writer.cpp      $(slib) : : : : test-cfile_writer.cpp-nho ]
   [ run streambuf_writer.cpp  $(slib) : : : : test-streambuf_writer.cpp-nho ]
   [ run string_writer.cpp     $(slib) : : : : test-string_writer.cpp-nho ]
;

# Satisfy the Boost library requirements
test-suite minimal  : stringify ;
test-suite full     : stringify ;
test-suite extra    : stringify ;

explicit stringify ;
explicit minimal ;
explicit extra ;
